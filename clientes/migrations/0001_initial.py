# Generated by Django 4.1 on 2024-01-06 15:19

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Pessoa',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_completo', models.CharField(max_length=100)),
                ('rua', models.CharField(max_length=100)),
                ('numero', models.IntegerField()),
                ('bairro', models.CharField(max_length=100)),
                ('cep', models.CharField(max_length=9, validators=[django.core.validators.RegexValidator(code='invalid_cep', message='CEP deve seguir o formato 12345-678.', regex='^\\d{5}-\\d{3}$')])),
                ('ponto_referencia', models.CharField(blank=True, max_length=200, null=True)),
                ('telefone_fixo', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(code='invalid_telefone_fixo', message='Telefone fixo deve seguir o formato (xx) xxxx-xxxx ou (xx) xxxxx-xxxx.', regex='^\\(\\d{2}\\) \\d{4,5}-\\d{4}$')])),
                ('numero_celular', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(code='invalid_celular', message='Número de celular deve seguir o formato (xx) xxxxx-xxxx.', regex='^\\(\\d{2}\\) \\d{5}-\\d{4}$')])),
                ('email', models.CharField(blank=True, max_length=100, null=True, validators=[django.core.validators.EmailValidator(code='invalid_email', message='E-mail deve ser válido.')])),
                ('tipo_cliente', models.CharField(choices=[('PF', 'Pessoa Física'), ('PJ', 'Pessoa Jurídica')], max_length=50)),
                ('cnpj', models.CharField(blank=True, max_length=18, null=True, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_cnpj', message='CNPJ deve seguir o formato 12.345.678/9012-34.', regex='^\\d{2}\\.\\d{3}\\.\\d{3}/\\d{4}-\\d{2}$')])),
                ('cpf', models.CharField(blank=True, max_length=14, null=True, unique=True, validators=[django.core.validators.RegexValidator(code='invalid_cpf', message='CPF deve seguir o formato 123.456.789-01.', regex='^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$')])),
            ],
        ),
    ]
